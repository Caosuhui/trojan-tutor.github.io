<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Trojan-Panel配置</title>
      <link href="/2019/06/08/p43.html"/>
      <url>/2019/06/08/p43.html</url>
      
        <content type="html"><![CDATA[<h1 id="期望效果"><a href="#期望效果" class="headerlink" title="期望效果"></a>期望效果</h1><p>panel与trojan共存。</p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ol><li>本文假设你已完全理解<a href="/2019/04/10/p41.html">自建梯子教程 –trojan版本</a>，否则请先按照<a href="/2019/04/10/p41.html">自建梯子教程 –trojan版本</a>配置好服务器；</li><li><strong><em>不能</em></strong>使用root用户，但是要确保用户具有sudo权限，使用配置trojan的时候的同一个账户也是可以的。</li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx mariadb-server php-fpm php-mysql curl git unzip php-cli php-xml php-json php-mbstring php-tokenizer php-bcmath</span><br></pre></td></tr></table></figure><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li>这里要输入数据库的root用户的密码，由于是新安装的数据库，故直接回车就好；</li><li>y，设置数据库密码，一会儿要用，建议与trojan的全局密码相同，方便记忆，因为配置完panel之后trojan的全局密码就没用了。</li><li>数据库密码；</li><li>确认数据库密码；</li><li>四个y。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入数据库root用户的密码，该密码是在配置数据库的时候设置的。</p><p>下面的两条命令创建了一个叫trojan的数据库和一个叫trojan数据库用户，trojan的密码为password，建议与trojan的全局密码相同，后面要用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE trojan;</span><br><span class="line">GRANT ALL PRIVILEGES ON trojan.* to trojan@&apos;%&apos; IDENTIFIED BY &apos;&lt;password&gt;&apos;;</span><br></pre></td></tr></table></figure><p>下面的命令重新加载privileges并检查配置是否成功，随后退出mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">SELECT User FROM mysql.user;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><h2 id="安装PHP软件包管理系统"><a href="#安装PHP软件包管理系统" class="headerlink" title="安装PHP软件包管理系统"></a>安装PHP软件包管理系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo curl -sS https://getcomposer.org/installer -o composer-setup.php</span><br><span class="line">sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer</span><br></pre></td></tr></table></figure><h2 id="安装NodeJS和npm"><a href="#安装NodeJS和npm" class="headerlink" title="安装NodeJS和npm"></a>安装NodeJS和npm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt install nodejs</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="安装trojan-panel"><a href="#安装trojan-panel" class="headerlink" title="安装trojan-panel"></a>安装trojan-panel</h2><p>注意，下面的命令中<test>修改为你当前用户名和组名，不理解请参考<a href="/2019/04/10/p41.html">自建梯子教程 –trojan版本</a>。如果使用root用户执行<code>npm install</code>是会报错的，如果非要使用root执行的话，那么在前面加<code>sudo</code>可以解决。</test></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone https://github.com/trojan-gfw/trojan-panel.git</span><br><span class="line">sudo chown -R &lt;test&gt;:&lt;test&gt; trojan-panel</span><br><span class="line">cd trojan-panel</span><br><span class="line">composer install</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="配置trojan-panel运行环境"><a href="#配置trojan-panel运行环境" class="headerlink" title="配置trojan-panel运行环境"></a>配置trojan-panel运行环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br><span class="line">php artisan key:generate</span><br><span class="line">vi .env</span><br></pre></td></tr></table></figure><p>其中APP_URL和DB_PASSWORD分别是你的域名和数据库密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure><h2 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">sudo chown -R www-data:www-data /var/www/trojan-panel</span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>将下面这段代码拷贝到记事本，然后参考<a href="/2019/04/10/p41.html#nginxconfig">自建梯子教程 –trojan版本</a>中配置Nginx节的说明修改。另外一个要修改的地方是这段代码中的config关键字，你大可以修改为你自己喜欢的而且不易被猜中的。编辑好这段代码之后之后再拷贝到Xshell执行。</p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整。</em></strong></p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整。</em></strong></p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &apos;echo &quot;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 default_server;</span><br><span class="line"></span><br><span class="line">    server_name &lt;tdom.ml&gt;;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.ietf.org;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /config &#123;</span><br><span class="line">        alias /var/www/trojan-panel/public;</span><br><span class="line">        index index.php;</span><br><span class="line">        try_files \$uri \$uri/ @config;</span><br><span class="line"></span><br><span class="line">        location ~ \.php\$ &#123;</span><br><span class="line">            include snippets/fastcgi-php.conf;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME \$request_filename;</span><br><span class="line">            fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\\.(?&quot;&apos;!&apos;&quot;well-known).* &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @config &#123;</span><br><span class="line">        rewrite /config/(.*)\$ /config/index.php?/\$1 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80;</span><br><span class="line"></span><br><span class="line">    server_name 10.10.10.10;</span><br><span class="line"></span><br><span class="line">    return 301 https://&lt;tdom.ml&gt;\$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    return 301 https://&lt;tdom.ml&gt;\$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">&quot; &gt; /etc/nginx/sites-available/default&apos;</span><br></pre></td></tr></table></figure><h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="更新trojan配置文件"><a href="#更新trojan配置文件" class="headerlink" title="更新trojan配置文件"></a>更新trojan配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/trojan/config.json</span><br></pre></td></tr></table></figure><p>将mysql中的enabled改为true，password填写刚才为数据库用户trojan设置的密码。</p><h2 id="重启trojan"><a href="#重启trojan" class="headerlink" title="重启trojan"></a>重启trojan</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>浏览器中访问：<a href="https://yourdomain.com/config" target="_blank" rel="noopener">https://yourdomain.com/config</a>看看是否可以访问trojan-panel，如果可以访问trojan-panel的话，那么就可以注册账户了。第一个注册的用户是管理员，用户要使用需要管理员审核，即<strong><em>将用户的Quota设为-1</em></strong>。配置文件中的密码填写在panel注册的用户信息：”Username:Password”。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 代理工具 </tag>
            
            <tag> gfw </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> vps </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 服务器 </tag>
            
            <tag> trojan </tag>
            
            <tag> trojan-gfw </tag>
            
            <tag> Nginx </tag>
            
            <tag> panel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建梯子教程 --Trojan版本</title>
      <link href="/2019/04/10/p41.html"/>
      <url>/2019/04/10/p41.html</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本文总结了自己在VPS搭建<a href="https://github.com/trojan-gfw/trojan" target="_blank" rel="noopener">trojan-gfw</a>代理过程中遇到的各种坑，以及最后的解决方案，以供大家参考。trojan是一个比较新的翻墙软件，在设计时采用了更适应国情的思路。在穿透gfw时，人们认为强加密和随机混淆可能会欺骗gfw的过滤机制。然而，trojan实现了这个思路的反面：它模仿了互联网上最常见的HTTPS协议，以诱骗gfw认为它就是HTTPS，从而不被识别。</p><p>本文的宗旨在于，将大量重复性的工作集中到配置过程中，以让使用过程尽量简单。所以本文的配置过程相较于网上的某些教程稍微复杂一点，但是如果严格按照本文配置过程配置的话，那么配置完成之后服务器端就可以几乎不用搭理他了，然后客户端几乎是拿到手就可以使用，特别适合有好几个人一起共享的情况。</p><p>本文分为7章，将按操作顺序介绍部署用于trojan代理服务的VPS服务器的详细过程，按照步骤操作一切正常的话一小时之内即可配置成功。如果配置过程中有什么疑问，欢迎在留言区交流！</p><h1 id="VPS服务器购买"><a href="#VPS服务器购买" class="headerlink" title="VPS服务器购买"></a>VPS服务器购买</h1><h2 id="注册vultr"><a href="#注册vultr" class="headerlink" title="注册vultr"></a>注册vultr</h2><p>我使用的服务器是vultr。主要因为其按小时计费，随时可以停用服务器。这一点很重要，现在gfw相当高，所以你买到的机器很可能是已经被墙了的。其次，vultr本身没有被墙，这一点很重要，不然就是先有鸡还是先有蛋的问题了。当然，可以支付宝或微信付款也是一个加分点。vultr注册地址：<a href="https://www.vultr.com/?ref=7241747" target="_blank" rel="noopener">https://www.vultr.com/?ref=7241747</a>。点击链接跳转到vultr，网页右上角有个Create Account就是注册的地方了，接下来就是注册并激活账号了。</p><p><strong><em>最新资讯：vultr充值10美元送50美元活动开始啦，必须是新用户，可支付宝或微信等支付方式，活动注册地址：<a href="https://www.vultr.com/?ref=7792804-4F" target="_blank" rel="noopener">https://www.vultr.com/?ref=7792804-4F</a>！不过要注意的是，赠送的50美元有效期只有一个月，所以这一个月你可以开配置好一点的vps啦！！！</em></strong></p><p><strong><em>上面的注册地址携带了我的邀请码，不介意的话可以通过上面的链接注册呀，大家互惠互利咯。如果介意那么将网址后面的邀请码删除即可，但是要注意的是没有邀请码充值是不会赠送50美元的哦。</em></strong></p><h2 id="充值"><a href="#充值" class="headerlink" title="充值"></a>充值</h2><p>在购买服务器之前需要先充值。登陆vultr之后如图Billing-&gt;Alipay，选好要充值的金额数，然后Pay with Alipay即可跳转到支付宝扫码支付页面。<br><img src="p41/Billing.jpg" alt="Billing"></p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>点击vultr网页右上角的蓝色+图标即可为账户添加服务器。<br><img src="p41/addServer.jpg" alt="addServer"></p><p><strong>注意</strong>：向下滚动有很多选项，不要直接点击Deploy Now，这样会使用默认参数，但不是我们想要的！<br>第一个选项为选择服务器类型（Choose Server），这里选择Cloud Compute。<br><img src="p41/chooseServer.jpg" alt="服务器类型，选择Cloud Compute"></p><p>第二个选项为选择服务器地址（Server Location），建议选择硅谷（Silicon Valley，离google最近），而不要选择日本（用的人多，大部分IP已经被墙）；<br><img src="p41/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E7%82%B9.jpg" alt="服务器地点"></p><p>第三个选项为选择服务器类型（Server Type），即选择服务器操作系统。这里我们选择选择Ubuntu 18.10 x64，这是trojan最低支持的Ubuntu操作系统版本，查看trojan支持的Ubuntu版本可以去<a href="https://launchpad.net/~greaterfire/+archive/ubuntu/trojan" target="_blank" rel="noopener">这里</a>。许多教程选择其他操作系统发行版本，但是配置过程和软件升级会比Ubuntu麻烦很多，所以还是建议大家选择Ubuntu。 注意如果你使用其他vps服务商的vps，可能有minimal选项，不能选择那一个，很多依赖乃没有安装，会导致自己配置失败（当然也可以，缺少哪个依赖自己再用apt安装就好了，例如：<code>apt install software-properties-common</code>和<code>apt install vi</code>等）。最后，如果你确实是有其他系统或者比较旧的系统版本需要安装trojan的话，建议使用docker，正文中部分配置只需要做细微修改即可，为了文章的整体性我就不放在正文了，请参考评论区。<br><img src="p41/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB%E5%9E%8B.jpg" alt="服务器类型"></p><p>第四个选项为选择服务器大小（Server Size），即选择服务器硬件性能。因为我们使用VPS服务器翻墙，所以性能瓶颈不在配置，而在网络带宽之类的。由于vultr的服务器带宽都是100M的，所以服务器当然是往便宜了选。当然，<code>$2.5/mo</code>的一般都是缺货的。选择<code>$5/mo</code>的就好，一个月三十几块钱，要是有好几个人一起分担的话就相当实惠了。<br><img src="p41/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%A7%E5%B0%8F.jpg" alt="服务器大小"></p><p>第五、六、七三个选项可以不用管它。</p><p>第八条要求为即将部署的服务器命名并给一个标签，随意就好。</p><p>此时可以点击右下角的现在部署（Deploy Now），vultr即开始分配资源，安装系统。此时Servers页面可以看到服务器信息，状态显示installing。当状态切换为Running的时候，服务器就可以使用了。<br><img src="p41/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%87%E7%AD%BE.jpg" alt="服务器标签"></p><h2 id="服务器信息查看"><a href="#服务器信息查看" class="headerlink" title="服务器信息查看"></a>服务器信息查看</h2><p>服务器安装结束之后在Servers页面点击刚才购买的服务器名字即可跳转到服务器详情页。如图右上角有一个View console可以直接通过网页连接到服务器，但是由于它不支持复制粘贴，不方便，我们需要使用第三方工具连接到服务器。所以需要知道IP、用户名和密码，如图左下角。<br><img src="p41/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF.jpg" alt="服务器信息"></p><h1 id="域名申请与解析"><a href="#域名申请与解析" class="headerlink" title="域名申请与解析"></a>域名申请与解析</h1><p>trojan需要一个域名用来做伪装，所以需要先申请一个域名。如果你只是用来翻墙没有其他作用，那么建议注册一个免费域名即可。本教程使用freenom免费域名和cloudflareDNS为例。</p><a name="domain"><p>如果自己已经有域名了那么可以不用申请，直接用一个子域名就可以了。如果你的域名不是在cloudflare购买，那么你有两个方案可用。1. 将你的域名转移到cloudflare解析，这个对于已经有域名的来说应该不难，就不多说了；2. 下文与cloudflare相关的部分自行参考<a href="https://github.com/Neilpang/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">这个文档</a>做调整，也很简单，找到你自己的DNS服务商，按照指引操作即可。建议是先严格按照教程操作成功之后再改为自己的域名，否则难免出奇怪的问题。</p><h2 id="freenom免费域名申请"><a href="#freenom免费域名申请" class="headerlink" title="freenom免费域名申请"></a>freenom免费域名申请</h2><p><strong><em>我自己在使用Edge注册freenom的时候会失败，使用<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">chrome</a>才可以，你如果也失败了请换一个浏览器试试！</em></strong></p><p><strong><em>freenom在检测到ip对应的国家和你填写的不一致就会不允许你注册，所以不要挂VPN去申请域名。</em></strong></p><p>freenom注册地址在这里<a href="https://www.freenom.com" target="_blank" rel="noopener">https://www.freenom.com</a>，支持简体中文，可以自行切换。在寻找一个免费域名的输入框中输入自己理想的域名点击检查可用性，如图所示。检查到可用的中意的域名之后，点击现在获取即可锁定该域名。<br><img src="p41/%E6%A3%80%E6%9F%A5%E5%9F%9F%E5%90%8D%E5%8F%AF%E7%94%A8%E6%80%A7.jpg" alt="检查域名可用性"></p><p>现在可以点击完成按钮跳转到DNS配置和申请年限界面。点击Use DNS&gt;&gt;Use Frenom DNS Service。两个IP address框都直接输入0.0.0.0（这个没用，一会儿会改到cloudflareDNS）。Period选择12 Months @ FREE，然后点击Continue，输入并验证你的邮箱和信息即可。<strong><em>注意上面的提示，不要挂VPN，很多人会卡在验证账户的地方，一般都是挂了VPN导致的。</em></strong></p><p>在freenom申请的免费域名是可以无限免费续期的，除非被人花钱抢注，所以自己每隔几个月回来续期一下就可以啦。反正这个域名只是拿来翻墙用，被人抢注了马上换一个成本也不大。如果介意这个的话，建议自己买付费域名，国外域名服务商推荐<a href="https://namecheap.com" target="_blank" rel="noopener">namecheap</a>，<strong><em>不要买国内域名服务商的域名</em></strong>。<br><img src="p41/%E4%BD%BF%E7%94%A8%E6%9C%9F%E9%99%90%E8%AE%BE%E7%BD%AE.jpg" alt="使用期限设置"></p><h2 id="注册cloudflare"><a href="#注册cloudflare" class="headerlink" title="注册cloudflare"></a>注册cloudflare</h2><p>cloudflare注册地址在这里<a href="https://www.cloudflare.com" target="_blank" rel="noopener">https://www.cloudflare.com</a>，网页右上角有个Sign up就是注册的地方了，接下来就是注册并激活账号了。注册完成之后会让你添加你的网站，输入你刚才申请的网站之后点击Add site。<br><img src="p41/%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99.jpg" alt="添加网站"></p><p>接下来是一个提示页面，直接下一步即可。然后计划选择FREE就好，够用了，然后点击confirm plan。<br><img src="p41/cf%E8%AE%A1%E5%88%92.jpg" alt="cf计划"></p><p>然后cloudflare会导入现有的DNS记录，你也可以自己再添加，也可以在这里修改，现在需要将DNS记录指向自己的服务器。假设你的服务器地址是10.10.10.10，那么如下图所示：将域名A记录指向你的服务器即可，www的A记录删除不用。如果IP地址是IPv6的，那么需要添加的是AAAA记录而不是A记录（客户端也得有IPv6地址才能连接上服务器）。vultr的服务器是IPv4和IPv6地址都有的，可以即添加A记录又添加AAAA记录，客户端会自动选择他将会使用的IP地址版本。添加好记录之后，点击continue。<strong><em>注意：不能使用CDN（On Cloudflare），即DNS记录后面的云需要是灰色的而不是橙色的，否则会导致握手失败无法连接上服务器，参考<a href="https://github.com/trojan-gfw/trojan/issues/70" target="_blank" rel="noopener">trojan issue 70</a></em></strong><br><img src="p41/%E5%AF%BC%E5%85%A5dns%E8%AE%B0%E5%BD%95.jpg" alt="导入dns记录"></p><p>接下来就是最关键的一步，将你的DNS服务器转移到cloudflare。在这里你可以看到cloudflare让你将ns01.freenom.com和ns02.freenom.com分别改为anna.ns.cloudflare.com和sid.ns.cloudflare.com（每个人的可能不会一样，请按照cloudflare的提示）。</p><p>现在登陆<a href="https://my.freenom.com" target="_blank" rel="noopener">freenom</a>，点击域名后面对应的Manage Domain。<br><img src="p41/freenomMG.jpg" alt="freenomMG"></p><p>然后定位到Management Tools&gt;&gt;Nameservers。将DNS服务器改为Use custom nameservers (enter below)，然后在Nameserver 1和Nameserver 2输入cloudflare给的两个dns，如图所示，点击change Nameservers即可。然后回到cloudflare点击Continue。<br><img src="p41/%E4%BF%AE%E6%94%B9dnsservers.jpg" alt="修改dnsservers"></p><p>此时cloudflare会检测你的dns服务器是否已经切换到了cloudflare，如果没有检测到已经切换的话，稍作等待即可。最终，DNS配置结果如下图所示，即<br><img src="p41/DNS%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%9C.jpg" alt="DNS配置结果"></p><h1 id="VPS服务器部署"><a href="#VPS服务器部署" class="headerlink" title="VPS服务器部署"></a>VPS服务器部署</h1><p><strong><em>跳过了上面VPS服务器购买部分的介绍的要注意啦，本教程目前支持的操作系统版本是Ubuntu 18.10及以上，其他系统无法配置成功！</em></strong></p><p><strong><em>跳过了上面VPS服务器购买部分的介绍的要注意啦，本教程目前支持的操作系统版本是Ubuntu 18.10及以上，其他系统无法配置成功！</em></strong></p><p><strong><em>跳过了上面VPS服务器购买部分的介绍的要注意啦，本教程目前支持的操作系统版本是Ubuntu 18.10及以上，其他系统无法配置成功！</em></strong></p><h2 id="远程工具安装"><a href="#远程工具安装" class="headerlink" title="远程工具安装"></a>远程工具安装</h2><p>本文使用的第三方远程管理工具叫做<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">Xshell</a>。Xshell学生和家庭版是免费的，可以放心试用（<strong><em>觉得好用的话，不差钱的各位也可以注册一下支持软件开发者噢</em></strong>）。安装好Xshell之后即可开始连接服务器进行部署了。不过Xshell没有Mac端，所以Mac可以使用其他ssh客户端，甚至直接用终端都可以，用法大同小异。</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>启动Xshell，从菜单栏的文件-&gt;新建打开新建会话窗口如下图。会话名称随便取一个都可以，主机填写刚才记下来的服务器IP地址或者直接填域名也是可以的。点击确定立即尝试连接服务器，如果能连接上服务器会提示输入用户名和密码。用户名为root，密码可以从vultr服务器详情页拷贝过来。可以记住用户名和密码，这样下次连接就不用再输入那个复杂的密码了（当然密码是可以修改的，但是没必要。系统自动生成的密码强度相当高，可以避免暴力破解。自己设的密码就不好说了，而且还容易忘记）。<br><img src="p41/%E6%96%B0%E5%BB%BA%E4%BC%9A%E8%AF%9D.jpg" alt="新建会话"></p><p>连接成功之后会出现命令提示符：<code>root@username:~#</code>。<br><img src="p41/Xshell.jpg" alt="新建会话"></p><h2 id="创建用户账户"><a href="#创建用户账户" class="headerlink" title="创建用户账户"></a>创建用户账户</h2><p>为了系统安全，自己新建一个非root但是有sudo权限的用户继续后面的操作，代码如下所示，注意密码强度不能太低。第一条命令创建用户，第二条命令将该用户加入sudo组，第三条命令切换到该用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser &lt;username&gt;</span><br><span class="line">sudo adduser &lt;username&gt; sudo</span><br><span class="line">sudo -i -u &lt;username&gt;</span><br></pre></td></tr></table></figure><p>结果如图所示，可以看到正确新建了一个test用户并切换到了test（下文也假设你都用户名和组名均为test），系统提示如果要使用root权限需要在命令前添加sudo。注意，上述命令会为<code>&lt;username&gt;</code>生成一个同名的组，这个后面会用到。另外，本文中代码需要手动修改的地方都使用<code>&lt;&gt;</code>包裹。<br><img src="p41/newUser.jpg" alt="创建用户"></p><p>连接上服务器后就可以开始安装trojan了。对于Xshell连不上服务器的情况，如果是使用域名连接的话，先<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping</a>一下域名看看是否DNS解析尚未生效，如果尚未生效，那么需要等一下。如果<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping</a>不通IP的话，那么多半是被墙了，估计只能换掉服务器了（<strong>血的教训</strong>：先购买新服务器，再去vultr服务器页面Destroy。反过来的话间隔太小，估计又买到原来的ip了）。</p><h2 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h2 id="启动bbr"><a href="#启动bbr" class="headerlink" title="启动bbr"></a>启动bbr</h2><p>bbr是谷歌开发的网络控制算法，可以加快访问速度。执行下面命令查看当前系统是否启用bbr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>执行完成之后如果<strong><em>提示<code>net.ipv4.tcp_congestion_control = bbr</code></em></strong>即表示启动了bbr，可以跳过下面启动bbr的步骤。</p><p>直接将下面三条命令拷贝粘贴到Xshell里面执行即可启动bbr，检查启动状态同上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">'echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf'</span></span><br><span class="line">sudo bash -c <span class="string">'echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf'</span></span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p><strong><em>不是使用cloudflare DNS的请查看<a href="#domain">域名申请与解析</a>部分自己做调整！</em></strong></p><h3 id="安装acme-sh自动管理CA证书脚本"><a href="#安装acme-sh自动管理CA证书脚本" class="headerlink" title="安装acme.sh自动管理CA证书脚本"></a>安装acme.sh自动管理CA证书脚本</h3><p><strong><em>分别</em></strong>执行如下两个命令，注意提示，输入y，而且注意看是否报错。前面一条是安装acme需要的依赖，第二条是安装acme。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install socat cron curl</span><br><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><h3 id="重新连接服务器"><a href="#重新连接服务器" class="headerlink" title="重新连接服务器"></a>重新连接服务器</h3><p><strong><em>安装完acme之后要重新链接服务端，否则无法识别出acme.sh命令，重新连接之后注意切换到用户<code>&lt;test&gt;</code></em></strong>。</p><p><strong><em>安装完acme之后要重新链接服务端，否则无法识别出acme.sh命令，重新连接之后注意切换到用户<code>&lt;test&gt;</code></em></strong>。</p><p><strong><em>安装完acme之后要重新链接服务端，否则无法识别出acme.sh命令，重新连接之后注意切换到用户<code>&lt;test&gt;</code></em></strong>。</p><h3 id="添加cloudflare-Global-CA-Key"><a href="#添加cloudflare-Global-CA-Key" class="headerlink" title="添加cloudflare Global CA Key"></a>添加cloudflare Global CA Key</h3><p>需要让acme.sh自动管理你的证书，所以需要添加cloudflare的API。登录cloudflare之后定位到：头像&gt;&gt;My Profile&gt;&gt;页面底部。可以看到这里有两个API Key。我们需要的是Global API Key。Origin CA Key是不可以使用的。点击View即可查看，注意查看之后自己保存下来，每天可查看次数是有限制的。</p><p>然后在Xshell里面执行如下两条命令，注意执行成功没有提示，所以自己不要输错了。其中引号内的内容改为你自己的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"&lt;Your Global API Key&gt;"</span></span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"&lt;Your cloudflare account Email&gt;"</span></span><br></pre></td></tr></table></figure><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>执行如下命令（<strong><em>注意域名改为你自己的</em></strong>），等待一会儿。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d &lt;tdom.ml&gt;</span><br></pre></td></tr></table></figure><p>看到下图的提示表示证书申请成功。<br><img src="p41/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%88%90%E5%8A%9F%E6%8F%90%E7%A4%BA.jpg" alt="证书申请成功提示"></p><p><strong><em>申请失败怎么办？</em></strong>证书申请失败的可能性一般有：1. CF_Key或CF_Email填写错误；证书申请次数超限等。此时切记反复尝试，证书每一个周申请次数是有限制的，好像是20次，如果超限了就需要等一个周或者更换域名了。如果需要反复测试，那么可以在上述命令后加<code>--staging</code>参数继续测试，待此时通过之后再取消<code>--staging</code>参数再执行一次。如果提示证书已经存在你仍然想要重新申请证书（比如使用<code>--staging</code>参数获取的证书客户端是无法认证的），那么可以将上述命令中的<code>--issue</code>参数改为<code>--renew</code>参数，或者去上图所示目录删除掉已存在的证书和密钥。</p><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>执行如下命令（<strong><em>注意域名改为你自己的</em></strong>），前两条命令新建一个目录并将其所有者改为当前用户，以便可以存放证书。第三条命令是使用acme.sh命令将证书安装到acme目录，这样acme.sh更新证书的时候会自动将新的证书安装到这里。第四条命令是配置acme.sh自动更新证书，这样配置完trojan之后一般不用管服务器。第五条命令是赋予证书文件夹同组用户读取权限，使得trojan可以读取证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/acme</span><br><span class="line">sudo chown -R &lt;<span class="built_in">test</span>&gt;:&lt;<span class="built_in">test</span>&gt; /etc/acme</span><br><span class="line">acme.sh --install-cert -d &lt;tdom.ml&gt; --key-file /etc/acme/private.key --fullchain-file /etc/acme/certificate.crt</span><br><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br><span class="line">chmod -R 750 /etc/acme</span><br></pre></td></tr></table></figure><h2 id="配置trojan"><a href="#配置trojan" class="headerlink" title="配置trojan"></a>配置trojan</h2><h3 id="为trojan创建用户"><a href="#为trojan创建用户" class="headerlink" title="为trojan创建用户"></a>为trojan创建用户</h3><p>同样，为了系统安全，我们单独为trojan创建一个系统用户。该用户不需要登录，也不需要设置密码，但是需要读取证书文件，所以将trojan附加到配置acme的用户所在的组。命令如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -r trojan</span><br><span class="line">sudo adduser trojan &lt;<span class="built_in">test</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="添加ppa源"><a href="#添加ppa源" class="headerlink" title="添加ppa源"></a>添加ppa源</h3><p>分别执行如下三个命令，注意提示，输入回车或者y，而且注意看是否报错。第一个命令是安装ppa源管理工具，第二个命令是安装trojan的ppa源，第三个命令是更新源以让系统可以找到trojan。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:greaterfire/trojan</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装trojan"><a href="#安装trojan" class="headerlink" title="安装trojan"></a>安装trojan</h3><p>分别执行如下三个命令，注意提示，输入y，而且注意看是否报错。第一个命令是安装trojan，安装完成一般会提示版本号注意看是否是最新版本。第二个命令是将trojan配置文件的所有者修改为当前用户，由于使用sudo安装的trojan，该配置文件默认是属于root用户的，不修改所有者会导致启动trojan遇到权限问题。第三个命令是修改配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install trojan</span><br><span class="line">sudo chown -R trojan:trojan /etc/trojan</span><br><span class="line">sudo vi /etc/trojan/config.json</span><br></pre></td></tr></table></figure><p>第三个命令执行完之后屏幕会显示trojan的配置文件，按<code>i</code>进入编辑模式，使用方向键定位到<code>password</code>、<code>cert</code>和<code>key</code>并修改。密码按自己喜好，<code>cert</code>和<code>key</code>分别改为<code>/etc/acme/certificate.crt</code>和<code>/etc/acme/private.key</code>。编辑完成之后按<code>Esc</code>键退出编辑模式。输入英文冒号<code>:</code>，<code>vi</code>会进入命令模式，此时输入<code>wq</code>并回车即可保存刚才编辑的内容并退出<code>vi</code>。如果需要不保存而退出，那么输入<code>q!</code>强制退出<code>vi</code>。修改之后的config文件如图所示。另外，如果有<code>IPv6</code>地址，将<code>local_addr</code>的<code>0.0.0.0</code>改为<code>::</code>才可以使用。<br><img src="p41/%E4%BF%AE%E6%94%B9config.jpg" alt="修改config"></p><h3 id="启动trojan"><a href="#启动trojan" class="headerlink" title="启动trojan"></a>启动trojan</h3><h4 id="修改trojan启动用户"><a href="#修改trojan启动用户" class="headerlink" title="修改trojan启动用户"></a>修改trojan启动用户</h4><p>分别执行如下命令，打开<code>trojan.service</code>和<code>trojan@.service</code>文件，并将用户由nobody修改为trojan后重新加载配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /lib/systemd/system/trojan.service</span><br><span class="line">sudo vi /lib/systemd/system/trojan@.service</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="赋予trojan监听443端口能力"><a href="#赋予trojan监听443端口能力" class="headerlink" title="赋予trojan监听443端口能力"></a>赋予trojan监听443端口能力</h4><p>执行如下命令，赋予trojan监听1024以下端口的能力，使得trojan可以监听到443端口。这是由于我们使用非root用户启动了trojan，但是Linux默认不允许非root用户启动的进程监听1024以下的端口，除非为每一个二进制文件显式声明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip /bin/trojan</span><br></pre></td></tr></table></figure><h4 id="使用systemd启动trojan"><a href="#使用systemd启动trojan" class="headerlink" title="使用systemd启动trojan"></a>使用systemd启动trojan</h4><p>trojan启动、查看状态命令分别如下，第一条是启动trojan，第二条是查看trojan运行状态。启动之后再查看一下状态，trojan显示active (running)即表示正常启动了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart trojan</span><br><span class="line">systemctl status trojan</span><br></pre></td></tr></table></figure><h3 id="更新trojan"><a href="#更新trojan" class="headerlink" title="更新trojan"></a>更新trojan</h3><p>如果trojan版本有更新（可以去<a href="https://launchpad.net/~greaterfire/+archive/ubuntu/trojan" target="_blank" rel="noopener">这里</a>或<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">这里</a>查看是否有更新），那么使用本教程搭建的服务器端更新trojan版本只需要两条命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install trojan</span><br><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>执行如下命令即可安装Nginx，注意提示，输入y。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h3 id="写入Nginx配置文件"><a href="#写入Nginx配置文件" class="headerlink" title="写入Nginx配置文件"></a>写入Nginx配置文件</h3><a name="nginxconfig"><p>以防万一，先备份以下nginx配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</span><br></pre></td></tr></table></figure><p>执行如下命令（<strong><em>注意域名和IP改为你自己的</em></strong>），注意下面的代码块是一个整体，一起拷贝到记事本编辑好之后再拷贝到Xshell执行。</p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整，等介绍完基本配置再讲如何与现有服务集成。</em></strong></p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整，等介绍完基本配置再讲如何与现有服务集成。</em></strong></p><p><strong><em>该命令会覆盖系统中现有的nginx配置，如果你的nginx配置文件已经有服务请自己写入而不是用此脚本写入，注意其中使用’\‘转义的地方要调整，等介绍完基本配置再讲如何与现有服务集成。</em></strong></p><ol><li>第5行的server_name指向你自己的域名；</li><li>第8行的proxy_pass随便指向一个没有敏感信息的网站都可以，这就是你要反向代理的网站，这里我是用了RFC文档的地址；</li><li>第16行的server_name指向自己的IP；</li><li>第18和27行tdom.ml改为自己的域名，注意别填错了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">'echo "</span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 127.0.0.1:80 default_server;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    server_name &lt;tdom.ml&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        proxy_pass https://www.ietf.org;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 127.0.0.1:80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    server_name &lt;10.10.10.10&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 301 https://&lt;tdom.ml&gt;\$request_uri;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 0.0.0.0:80;</span></span><br><span class="line"><span class="string">    listen [::]:80;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    server_name _;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 301 https://&lt;tdom.ml&gt;\$request_uri;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">" &gt; /etc/nginx/sites-available/default'</span></span><br></pre></td></tr></table></figure><p>解释一下这个配置文件的一些细节：第一个server接收来自trojan的流量，与上面trojan配置文件对应；第二个server也是接收来自trojan的流量，但是这个流量尝试使用IP而不是域名访问服务器，所以将其认为是异常流量，并重定向到域名；第三个server接收除127.0.0.1:80外的所有80端口的流量并重定向到域名，防止恶意探测。</p><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>nginx启动命令和trojan一样，就不过多解释了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="与现有Nginx服务集成"><a href="#与现有Nginx服务集成" class="headerlink" title="与现有Nginx服务集成"></a>与现有Nginx服务集成</h3><p>如果你本机已经有Nginx服务，那么Nginx配置文件需要做适当修改以和现有服务兼容。</p><p>1.在原服务与trojan使用同一个域名且原来是监听443端口的情况下，那么直接将现有的Nginx服务监听地址改为第一个server监听的地址127.0.0.1:80并去除第一个server即可。这样https加密部分将会改由trojan处理而不是Nginx处理，原来的服务对于客户端来说就没有变化。</p><p>2.如果原来的服务与trojan使用不同的域名，建议是修改trojan与原来的服务使用同一个域名，如果非要使用不同的域名，请参考第3点。</p><p>3.如果原来的服务就监听了多个域名，那么请自己琢磨nginx的sni，参考连接：<a href="https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html" target="_blank" rel="noopener">ngx_stream_ssl_preread_module</a>。</p><p>4.如果原来的服务是监听80端口，想要继续监听80端口那么直接去除第三个server即可，如果要改为监听443端口参考第1点。</p><h2 id="配置trojan和nginx开机自启"><a href="#配置trojan和nginx开机自启" class="headerlink" title="配置trojan和nginx开机自启"></a>配置trojan和nginx开机自启</h2><p>虽然开机自启一般用不着，除非vultr机房停电，但是反正也没什么代价，弄一下吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> trojan</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>只打开22、80和443端口可以有效的阻止外部恶意流量，降低服务器暴露的风险。此步骤非必须，而且自己有其他服务记得其他服务的端口也要处理。</p><p>执行如下命令安装ufw，ufw是一个很好用的防火墙配置命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ufw</span><br></pre></td></tr></table></figure><p>如果服务器无IPv6地址那么需要执行如下命令，将IPV6=yes修改为IPV6=no。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/ufw</span><br></pre></td></tr></table></figure><p>执行如下命令即可成功配置防火墙。注意，如果ssh端口不是22那么第一行需要调整（将ssh改为端口号）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br><span class="line">sudo ufw allow https</span><br><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw status</span><br><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure><p>另外，如果对trojan不放心，那么可以参考<a href="https://github.com/trojan-gfw/trojan/wiki/Limiting-Server-Network-Access" target="_blank" rel="noopener">trojan wiki</a>，优化防火墙配置，使得trojan只能给127.0.0.1:80发送数据和响应外部请求。</p><h2 id="检查服务器是否配置成功"><a href="#检查服务器是否配置成功" class="headerlink" title="检查服务器是否配置成功"></a>检查服务器是否配置成功</h2><p>到这里服务器就配置完成了。此时你可以在浏览器里面访问你的网站看是否能够访问，如果你的网站可以访问了，那么就一切正常啦。</p><p>另外，基于以上考虑到的可能的恶意探测，可以验证一下以下情况是否正常。</p><ol><li>浏览器中使用ip访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>;</li><li>浏览器中使用<a href="https://ip" target="_blank" rel="noopener">https://ip</a>访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>(跳转的时候浏览器可能提示不安全是正常的);</li><li>浏览器中使用<a href="tdom.ml">tdom.ml</a>访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>。</li></ol><h1 id="windows或Mac客户端部署"><a href="#windows或Mac客户端部署" class="headerlink" title="windows或Mac客户端部署"></a>windows或Mac客户端部署</h1><p>  几点说明，目前客户端trojan不能使用全局代理，所以需要配合其他软件使用，比如proxifier等。推荐使用trojan+chrome插件SwitchyOmega实现只能chrome翻墙的目的。这样trojan只用监听一个端口，由chrome插件决定当前流量是否走代理。如果你有别的用途可以单独在某个软件内部使用SOCKS5协议指定代理，地址为trojan的地址：127.0.0.1:1080。</p><h2 id="配置windows客户端"><a href="#配置windows客户端" class="headerlink" title="配置windows客户端"></a>配置windows客户端</h2><p>windows客户端下载地址<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">trojan for Windows</a>，打开之后下载最新版本的win.zip压缩包。</p><p>下载成功之后解压，修改目录中的<code>config.json</code>配置文件中的<code>local_port</code>、<code>remote_addr</code>和<code>password</code>即可。其中，remote_addr填写自己的域名，local_port开启本地端口，用来接收本地数据。trojan不需要安装就可以直接运行，拷贝trojan文件夹到电脑里面，双击即可运行。为了方便自己建立一个快捷方式到桌面或者设置开机自启即可。如果启动报错，那么说明你的系统里面没有C++运行环境，需要安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">vc_redist.x86.exe</a>，然后重新启动trojan，确认trojan没有报错即可。如果启动trojan会一闪而过，那么应该是你配置文件有错误，请仔细检查（可以使用控制台运行trojan，能看到具体是哪一行有错）。</p><p><strong><em>如何配置图形界面：</em></strong>trojan的windows客户端目前还没有图形界面，如果对黑框有强迫症，可以使用<a href="https://github.com/rexdf/CommandTrayHost/releases" target="_blank" rel="noopener">CommandTrayHost</a>将黑框托盘化。这是本人目前采用的方案，相关文件可以在<a href="https://github.com/trojan-tutor/VPN/releases" target="_blank" rel="noopener">这里下载</a>，下载完成之后解压并将你的配置文件拷贝到trojan目录即可使用。</p><h2 id="配置Mac客户端"><a href="#配置Mac客户端" class="headerlink" title="配置Mac客户端"></a>配置Mac客户端</h2><p>MAC客户端下载地址<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">trojan for MAC</a>，打开之后下载最新版的macos.zip，编辑配置文件同windows客户端，编辑好配置文件后双击运行<code>start.command</code>即可。如果出现<code>bind: Permission denied</code>错误，需要在终端使用<code>killall trojan</code>命令杀掉现有的trojan相关的进程。如果出现<code>fatal: config.json(n): invalid code sequence</code>错误，那么是你的配置文件第n行有错误，请检查。</p><h2 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h2><p>如果没有安装chrome需要先安装一下<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">chrome</a>。</p><h2 id="确认服务器可达"><a href="#确认服务器可达" class="headerlink" title="确认服务器可达"></a>确认服务器可达</h2><p><strong><em>在chrome浏览器中访问你自己的网站，确保服务器可达。</em></strong>这一步在每一台Windows的客户端都必须做，否则有可能会连接服务器失败（trojan日志显示握手失败），这是Windows系统的问题（或者说是bug吧）。</p><h2 id="以SOCKS5方式启动Chrome"><a href="#以SOCKS5方式启动Chrome" class="headerlink" title="以SOCKS5方式启动Chrome"></a>以SOCKS5方式启动Chrome</h2><p>只需要这一次以SOCKS5启动Chrome，配置完成之后正常使用即可。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在命令提示符（搜索框输入cmd）输入下面的命令启动chrome，注意端口号如果你有修改也要对应的修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start C:\<span class="string">"Program Files (x86)"</span>\Google\Chrome\Application\chrome.exe --proxy-server=<span class="string">"socks5://127.0.0.1:1080"</span> --host-resolver-rules=<span class="string">"MAP * ~NOTFOUND, EXCLUDE 127.0.0.1"</span></span><br></pre></td></tr></table></figure><p><strong><em>如果上述命令无法启动chrome，是因为新版本的chrome更改了安装路径导致的，你需要更新你的chrome版本啦。</em></strong></p><h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><p>在终端输入下面的命令启动chrome，注意端口号如果你有修改也要对应的修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --proxy-server=<span class="string">"socks5://127.0.0.1:1080"</span> --host-resolver-rules=<span class="string">"MAP * ~NOTFOUND, EXCLUDE 127.0.0.1"</span></span><br></pre></td></tr></table></figure><h2 id="安装SwitchyOmega插件"><a href="#安装SwitchyOmega插件" class="headerlink" title="安装SwitchyOmega插件"></a>安装SwitchyOmega插件</h2><p>访问<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">Chrome网上应用店</a>，搜索SwitchyOmega即可找到SwitchyOmega插件并安装之。安装完成之后重启chrome。</p><h2 id="配置SwitchyOmega插件（以下每一步配置完之后记得应用选项）"><a href="#配置SwitchyOmega插件（以下每一步配置完之后记得应用选项）" class="headerlink" title="配置SwitchyOmega插件（以下每一步配置完之后记得应用选项）"></a>配置SwitchyOmega插件（以下每一步配置完之后记得应用选项）</h2><p>在chrome右上角打开SwitchyOmega配置界面，如图所示：<br><img src="p41/SwitchyOmega%E9%80%89%E9%A1%B9.jpg" alt="SwitchyOmega选项"></p><p>情景模式中的auto switch配置如图所示：注意规则列表规则选择proxy，规则列表格式为AutoProxy，其网址为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br></pre></td></tr></table></figure><p>填写完成之后需要先更新情景模式使其生效，如图所示：<br><img src="p41/autoSwitch.jpg" alt="autoSwitch"></p><p>情景模式中的proxy配置如下图所示，其中代理协议选择SOCKS5，这是trojan支持的协议，注意不要选错了，127.0.0.1:1080为trojan代理地址，只有流向这个地址的流量trojan才会处理，如果trojan配置文件有修改本地端口号这里也得对应的修改。<br><img src="p41/proxy.jpg" alt="proxy"></p><p>设定中的初始情景模式选择auto switch，如图所示。这样当检测到目标地址在gfw列表中的时候chrome会让其走trojan代理。否则直连。<br><img src="p41/%E5%88%9D%E5%A7%8B%E6%83%85%E6%99%AF%E6%A8%A1%E5%BC%8F.jpg" alt="初始情景模式"></p><p>然后重启chrome，保证SwitchyOmega运行在auto switch模式，否则可能无法正常使用，常见现象有无法访问国外网站、导致访问国内网站速度变慢或无法访问内网等。如图所示：<br><img src="p41/%E7%A1%AE%E5%AE%9A%E7%8A%B6%E6%80%81.jpg" alt="确定状态"></p><p>至此客户端trojan已经配置完成，尽情享受吧！！！</p><h1 id="其他客户端部署指南"><a href="#其他客户端部署指南" class="headerlink" title="其他客户端部署指南"></a>其他客户端部署指南</h1><p>Linux客户端：Linux客户端安装方式与服务端一样，配置文件参考客户端修改即可；</p><p>IOS客户端：美区ID+[<a href="https://apps.apple.com/app/pharos-pro/id1456610173" target="_blank" rel="noopener">Pharos Pro</a> | <a href="https://apps.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">Shadowrocket</a>];</p><p>Android客户端：<a href="https://github.com/trojan-gfw/igniter/releases" target="_blank" rel="noopener">igniter</a>，目前尚未支持分流，慎用！</p><h1 id="如何寻求帮助"><a href="#如何寻求帮助" class="headerlink" title="如何寻求帮助"></a>如何寻求帮助</h1><ol><li>去<a href="https://github.com/trojan-gfw/trojan/issues?utf8=%E2%9C%93&q=is%3Aissue" target="_blank" rel="noopener">trojan-gfw</a>项目查找是否有类似issue，如果有类似issue可自行参考解决。如果没有类似issue也可以在那里提交新的issue，基本上都会得到回复。</li><li>去<a href="https://github.com/trojan-gfw" target="_blank" rel="noopener">trojan-gfw</a>官方电报群请教群里的各位大佬：<a href="https://t.me/trojangfw" target="_blank" rel="noopener">trojan-gfw</a>。群里的人都是比较专业的，你的问题基本都能被解决。</li><li>在博客<a href="https://github.com/trojan-tutor/trojan-tutor.github.io/issues" target="_blank" rel="noopener">留言区</a>留言，我有空便会回复（但是肯定没有 1 和 2 方便和及时），记得带上服务端和客户端日志还有浏览器提示一起！</li></ol></a></a>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 代理工具 </tag>
            
            <tag> gfw </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> vps </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 服务器 </tag>
            
            <tag> trojan </tag>
            
            <tag> trojan-gfw </tag>
            
            <tag> Nginx </tag>
            
            <tag> ppa </tag>
            
            <tag> vultr </tag>
            
            <tag> https伪装 </tag>
            
            <tag> bash </tag>
            
            <tag> 小白教程 </tag>
            
            <tag> 搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
